{
    "openapi": "3.0.3",
    "info": {
        "title": "Event Driven Ansible API",
        "version": "1.2.0"
    },
    "paths": {
        "/activation-instances/": {
            "get": {
                "operationId": "activation_instances_list",
                "description": "List all the Activation Instances",
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by activation instance name."
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by activation instance status."
                    }
                ],
                "tags": [
                    "activation-instances"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedActivationInstanceList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/activation-instances/{id}/logs/": {
            "get": {
                "operationId": "activation_instances_logs_list",
                "description": "List all logs for the Activation Instance",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this Activation Instance.",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "log",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by activation instance log."
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "activation-instances"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedActivationInstanceLogList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/activation-instances/{id}/": {
            "get": {
                "operationId": "activation_instances_retrieve",
                "description": "Get the Activation Instance by its id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this rulebook process.",
                        "required": true
                    }
                ],
                "tags": [
                    "activation-instances"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActivationInstance"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/activations/": {
            "get": {
                "operationId": "activations_list",
                "description": "List all Activations",
                "parameters": [
                    {
                        "in": "query",
                        "name": "decision_environment_id",
                        "schema": {
                            "type": "number"
                        },
                        "description": "Filter by Decision Environment ID."
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by activation name."
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by activation status."
                    }
                ],
                "tags": [
                    "activations"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedActivationListList"
                                }
                            }
                        },
                        "description": "Return a list of Activations."
                    }
                }
            },
            "post": {
                "operationId": "activations_create",
                "tags": [
                    "activations"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ActivationCreate"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ActivationCreate"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ActivationCreate"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActivationRead"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid data to create activation."
                    },
                    "503": {
                        "description": "Dependent service issues"
                    },
                    "409": {
                        "description": "Redis is unavailable."
                    }
                }
            }
        },
        "/activations/{id}/instances/": {
            "get": {
                "operationId": "activations_instances_list",
                "description": "List all instances for the Activation",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this rulebook.",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by activation instance name."
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by activation instance status."
                    }
                ],
                "tags": [
                    "activations"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedActivationInstanceList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/activations/{id}/": {
            "get": {
                "operationId": "activations_retrieve",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this activation.",
                        "required": true
                    }
                ],
                "tags": [
                    "activations"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActivationRead"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "activations_partial_update",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this activation.",
                        "required": true
                    }
                ],
                "tags": [
                    "activations"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedActivationUpdate"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedActivationUpdate"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedActivationUpdate"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActivationRead"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid data to update activation."
                    },
                    "409": {
                        "description": "The activation is not allowed to be updated."
                    }
                }
            },
            "delete": {
                "operationId": "activations_destroy",
                "description": "Delete an existing Activation",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this activation.",
                        "required": true
                    }
                ],
                "tags": [
                    "activations"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The Activation has been deleted."
                    },
                    "409": {
                        "description": "Redis is unavailable."
                    }
                }
            }
        },
        "/activations/{id}/copy/": {
            "post": {
                "operationId": "activations_copy_create",
                "description": "Copy an activation.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this activation.",
                        "required": true
                    }
                ],
                "tags": [
                    "activations"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ActivationCopy"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ActivationCopy"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ActivationCopy"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActivationRead"
                                }
                            }
                        },
                        "description": "Return the copied activation."
                    },
                    "404": {
                        "description": "Activation not found."
                    }
                }
            }
        },
        "/activations/{id}/disable/": {
            "post": {
                "operationId": "activations_disable_create",
                "description": "Disable the Activation",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this activation.",
                        "required": true
                    }
                ],
                "tags": [
                    "activations"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Activation has been disabled."
                    },
                    "409": {
                        "description": "Redis is unavailable."
                    }
                }
            }
        },
        "/activations/{id}/enable/": {
            "post": {
                "operationId": "activations_enable_create",
                "description": "Enable the Activation",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this activation.",
                        "required": true
                    }
                ],
                "tags": [
                    "activations"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Activation has been enabled."
                    },
                    "400": {
                        "description": "Activation not enabled."
                    },
                    "409": {
                        "description": "Processing of enable is disallowed."
                    }
                }
            }
        },
        "/activations/{id}/restart/": {
            "post": {
                "operationId": "activations_restart_create",
                "description": "Restart the Activation",
                "parameters": [
                    {
                        "in": "query",
                        "name": "force",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Force restart after worker node offline"
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this activation.",
                        "required": true
                    }
                ],
                "tags": [
                    "activations"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Activation restart was successful."
                    },
                    "400": {
                        "description": "Activation not enabled."
                    },
                    "409": {
                        "description": "Redis is unavailable."
                    }
                }
            }
        },
        "/audit-rules/": {
            "get": {
                "operationId": "audit_rules_list",
                "description": "List all fired rules",
                "parameters": [
                    {
                        "in": "query",
                        "name": "activation_instance_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by activation_instance_id"
                    },
                    {
                        "in": "query",
                        "name": "created_at",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "description": "Filter by created_at"
                    },
                    {
                        "in": "query",
                        "name": "fired_at",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "description": "Filter by fired_at"
                    },
                    {
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "number"
                        },
                        "description": "Filter by id"
                    },
                    {
                        "in": "query",
                        "name": "job_instance_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by job_instance_id"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by name"
                    },
                    {
                        "in": "query",
                        "name": "organization_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by organization_id"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "rule_uuid",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by rule_uuid"
                    },
                    {
                        "in": "query",
                        "name": "ruleset_name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by ruleset_name"
                    },
                    {
                        "in": "query",
                        "name": "ruleset_uuid",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by ruleset_uuid"
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "A search term.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by status"
                    }
                ],
                "tags": [
                    "audit-rules"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedAuditRuleListList"
                                }
                            }
                        },
                        "description": "Return a list of fired rules."
                    }
                }
            }
        },
        "/audit-rules/{id}/actions/": {
            "get": {
                "operationId": "audit_rules_actions_list",
                "description": "Action list of a fired rule by its id",
                "parameters": [
                    {
                        "in": "query",
                        "name": "audit_rule_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by audit_rule_id"
                    },
                    {
                        "in": "query",
                        "name": "fired_at",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "description": "Filter by fired_at"
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this rule audit.",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by id"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by name"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "rule_fired_at",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "description": "Filter by rule_fired_at"
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "A search term.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by status"
                    },
                    {
                        "in": "query",
                        "name": "status_message",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by status_message"
                    },
                    {
                        "in": "query",
                        "name": "url",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by url"
                    }
                ],
                "tags": [
                    "audit-rules"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedAuditActionList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/audit-rules/{id}/events/": {
            "get": {
                "operationId": "audit_rules_events_list",
                "description": "Event list of a fired rule by its id",
                "parameters": [
                    {
                        "in": "query",
                        "name": "audit_actions",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by audit_actions"
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this Audit Rule.",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by id"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "payload",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by payload"
                    },
                    {
                        "in": "query",
                        "name": "received_at",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "description": "Filter by received_at"
                    },
                    {
                        "in": "query",
                        "name": "rule_fired_at",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "description": "Filter by rule_fired_at"
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "A search term.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "source_name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by source_name"
                    },
                    {
                        "in": "query",
                        "name": "source_type",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by source_type"
                    }
                ],
                "tags": [
                    "audit-rules"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedAuditEventList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/audit-rules/{id}/": {
            "get": {
                "operationId": "audit_rules_retrieve",
                "description": "Get the fired rule by its id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this audit rule.",
                        "required": true
                    }
                ],
                "tags": [
                    "audit-rules"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuditRuleDetail"
                                }
                            }
                        },
                        "description": "Return the fired rule by its id."
                    }
                }
            }
        },
        "/auth/session/login/": {
            "get": {
                "operationId": "auth_session_preflight",
                "description": "Use this method to set a CSRF cookie.",
                "tags": [
                    "auth"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "OK"
                    }
                }
            },
            "post": {
                "operationId": "auth_session_login",
                "description": "Session cookie login",
                "tags": [
                    "auth"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Login"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Login"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Login"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "403": {
                        "description": "Invalid credentials or user is disabled."
                    },
                    "204": {
                        "description": "Login successful."
                    }
                }
            }
        },
        "/auth/session/logout/": {
            "post": {
                "operationId": "auth_session_logout",
                "description": "Session logout.",
                "tags": [
                    "auth"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Logout successful."
                    }
                }
            }
        },
        "/auth/token/refresh/": {
            "post": {
                "operationId": "token_refresh",
                "description": "Refresh websocket access token",
                "tags": [
                    "auth"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RefreshToken"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/RefreshToken"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/RefreshToken"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JWTToken"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/config/": {
            "get": {
                "operationId": "config_retrieve",
                "description": "Get the current configuration info of EDA.",
                "tags": [
                    "config"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Config"
                                }
                            }
                        },
                        "description": "Return the current configuration info of EDA."
                    }
                }
            }
        },
        "/credential-input-sources/": {
            "get": {
                "operationId": "credential_input_sources_list",
                "description": "List all Credential Input Sources",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "source_credential",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter by Source Credential ID."
                    },
                    {
                        "in": "query",
                        "name": "target_credential",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter by Target Credential ID."
                    }
                ],
                "tags": [
                    "credential-input-sources"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedCredentialInputSourceList"
                                }
                            }
                        },
                        "description": "Return a list of Credential Input Sources."
                    }
                }
            },
            "post": {
                "operationId": "credential_input_sources_create",
                "description": "Create a new Credential Input Source.",
                "tags": [
                    "credential-input-sources"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CredentialInputSourceCreate"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/CredentialInputSourceCreate"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/CredentialInputSourceCreate"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CredentialInputSource"
                                }
                            }
                        },
                        "description": "Return the new Credential Input Source."
                    }
                }
            }
        },
        "/credential-input-sources/{id}/": {
            "get": {
                "operationId": "credential_input_sources_retrieve",
                "description": "Get CredentialInputSource by id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this credential input source.",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "refs",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "false",
                                "true"
                            ]
                        },
                        "description": "Query resources that have reference to the credential input source by its id"
                    }
                ],
                "tags": [
                    "credential-input-sources"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CredentialInputSource"
                                }
                            }
                        },
                        "description": "Return an Credential Input Source by id."
                    }
                }
            },
            "patch": {
                "operationId": "credential_input_sources_partial_update",
                "description": "Partial update of an Credential Input Source",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this credential input source.",
                        "required": true
                    }
                ],
                "tags": [
                    "credential-input-sources"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedCredentialInputSourceUpdate"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedCredentialInputSourceUpdate"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedCredentialInputSourceUpdate"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CredentialInputSource"
                                }
                            }
                        },
                        "description": "Update successful. Return an updated credential input source."
                    }
                }
            },
            "delete": {
                "operationId": "credential_input_sources_destroy",
                "description": "The CredentialInputSourceViewSet is used to link fields to external SMS.\n\nWhen the linkage happens we need the Source, Target credential and the\nfield name",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this credential input source.",
                        "required": true
                    }
                ],
                "tags": [
                    "credential-input-sources"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/credential-types/": {
            "get": {
                "operationId": "credential_types_list",
                "description": "List all credential types",
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by credential type name."
                    },
                    {
                        "in": "query",
                        "name": "namespace",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by credential type namespace."
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "credential-types"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedCredentialTypeList"
                                }
                            }
                        },
                        "description": "Return a list of credential types."
                    }
                }
            },
            "post": {
                "operationId": "credential_types_create",
                "description": "Create a new credential type.",
                "tags": [
                    "credential-types"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CredentialTypeCreate"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/CredentialTypeCreate"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/CredentialTypeCreate"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CredentialType"
                                }
                            }
                        },
                        "description": "Return the new credential type."
                    }
                }
            }
        },
        "/credential-types/{id}/": {
            "get": {
                "operationId": "credential_types_retrieve",
                "description": "Get credential type by id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this credential type.",
                        "required": true
                    }
                ],
                "tags": [
                    "credential-types"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CredentialType"
                                }
                            }
                        },
                        "description": "Return a credential type by id."
                    }
                }
            },
            "patch": {
                "operationId": "credential_types_partial_update",
                "description": "Partial update of a credential type",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this credential type.",
                        "required": true
                    }
                ],
                "tags": [
                    "credential-types"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedCredentialTypeCreate"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedCredentialTypeCreate"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedCredentialTypeCreate"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CredentialType"
                                }
                            }
                        },
                        "description": "Update successful. Return an updated credential type."
                    }
                }
            },
            "delete": {
                "operationId": "credential_types_destroy",
                "description": "Delete a credential type by id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this credential type.",
                        "required": true
                    }
                ],
                "tags": [
                    "credential-types"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete successful."
                    },
                    "409": {
                        "description": "CredentialType in use by Credentials."
                    }
                }
            }
        },
        "/credential-types/{id}/test/": {
            "post": {
                "operationId": "credential_types_test_create",
                "description": "Run a test on External Credential",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this credential type.",
                        "required": true
                    }
                ],
                "tags": [
                    "credential-types"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CredentialTypeTest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/CredentialTypeTest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/CredentialTypeTest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Test Successful."
                    },
                    "400": {
                        "description": "Test failed."
                    }
                }
            }
        },
        "/decision-environments/": {
            "get": {
                "operationId": "decision_environments_list",
                "description": "List all decision environments",
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by decision environment name."
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "decision-environments"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedDecisionEnvironmentList"
                                }
                            }
                        },
                        "description": "Return a list of decision environment."
                    }
                }
            },
            "post": {
                "operationId": "decision_environments_create",
                "description": "Create a new decision environment.",
                "tags": [
                    "decision-environments"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DecisionEnvironmentCreate"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/DecisionEnvironmentCreate"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/DecisionEnvironmentCreate"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DecisionEnvironment"
                                }
                            }
                        },
                        "description": "Return the new decision environment."
                    }
                }
            }
        },
        "/decision-environments/{id}/": {
            "get": {
                "operationId": "decision_environments_retrieve",
                "description": "Get a decision environment by id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this decision environment.",
                        "required": true
                    }
                ],
                "tags": [
                    "decision-environments"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DecisionEnvironmentRead"
                                }
                            }
                        },
                        "description": "Return a decision environment by id."
                    }
                }
            },
            "patch": {
                "operationId": "decision_environments_partial_update",
                "description": "Partially update a decision environment",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this decision environment.",
                        "required": true
                    }
                ],
                "tags": [
                    "decision-environments"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedDecisionEnvironmentCreate"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedDecisionEnvironmentCreate"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedDecisionEnvironmentCreate"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DecisionEnvironment"
                                }
                            }
                        },
                        "description": "Update successful. Return an updated decision environment."
                    }
                }
            },
            "delete": {
                "operationId": "decision_environments_destroy",
                "description": "Delete a decision environment by id",
                "parameters": [
                    {
                        "in": "query",
                        "name": "force",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Force deletion if there are dependent objects"
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this decision environment.",
                        "required": true
                    }
                ],
                "tags": [
                    "decision-environments"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete successful."
                    },
                    "409": {
                        "description": "Decision Environment in use by Activations."
                    }
                }
            }
        },
        "/eda-credentials/": {
            "get": {
                "operationId": "eda_credentials_list",
                "description": "List all EDA credentials",
                "parameters": [
                    {
                        "in": "query",
                        "name": "credential_type__kind",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Kind of CredentialType"
                    },
                    {
                        "in": "query",
                        "name": "credential_type_id",
                        "schema": {
                            "type": "number"
                        },
                        "description": "Filter by Credential Type ID."
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by EDA credential name."
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "eda-credentials"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedEdaCredentialList"
                                }
                            }
                        },
                        "description": "Return a list of EDA credentials."
                    }
                }
            },
            "post": {
                "operationId": "eda_credentials_create",
                "description": "Create a new EDA credential.",
                "tags": [
                    "eda-credentials"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EdaCredentialCreate"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/EdaCredentialCreate"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/EdaCredentialCreate"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EdaCredential"
                                }
                            }
                        },
                        "description": "Return the new EDA credential."
                    }
                }
            }
        },
        "/eda-credentials/{id}/input_sources/": {
            "get": {
                "operationId": "eda_credentials_input_sources_list",
                "description": "List all input_sources for the Credential",
                "parameters": [
                    {
                        "in": "query",
                        "name": "credential_type_id",
                        "schema": {
                            "type": "number"
                        },
                        "description": "Filter by Credential Type ID."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this credential.",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by EDA credential name."
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "eda-credentials"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedCredentialInputSourceList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/eda-credentials/{id}/": {
            "get": {
                "operationId": "eda_credentials_retrieve",
                "description": "Get EDA credential by id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this eda credential.",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "refs",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "false",
                                "true"
                            ]
                        },
                        "description": "Query resources that have reference to the credential by its id"
                    }
                ],
                "tags": [
                    "eda-credentials"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EdaCredential"
                                }
                            }
                        },
                        "description": "Return an EDA credential by id."
                    }
                }
            },
            "patch": {
                "operationId": "eda_credentials_partial_update",
                "description": "Partial update of an EDA credential",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this eda credential.",
                        "required": true
                    }
                ],
                "tags": [
                    "eda-credentials"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedEdaCredentialUpdate"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedEdaCredentialUpdate"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedEdaCredentialUpdate"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EdaCredential"
                                }
                            }
                        },
                        "description": "Update successful. Return an updated EDA credential."
                    }
                }
            },
            "delete": {
                "operationId": "eda_credentials_destroy",
                "description": "Delete an eda credential by id",
                "parameters": [
                    {
                        "in": "query",
                        "name": "force",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Force deletion if there are dependent objects"
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this eda credential.",
                        "required": true
                    }
                ],
                "tags": [
                    "eda-credentials"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete successful."
                    }
                }
            }
        },
        "/eda-credentials/{id}/copy/": {
            "post": {
                "operationId": "eda_credentials_copy_create",
                "description": "Copy an EDA credential.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this eda credential.",
                        "required": true
                    }
                ],
                "tags": [
                    "eda-credentials"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EdaCredentialCopy"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/EdaCredentialCopy"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/EdaCredentialCopy"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EdaCredential"
                                }
                            }
                        },
                        "description": "Return the copied EDA credential."
                    },
                    "404": {
                        "description": "EDA credential not found."
                    }
                }
            }
        },
        "/eda-credentials/{id}/test/": {
            "post": {
                "operationId": "eda_credentials_test_create",
                "description": "Test an external EDA credential.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this eda credential.",
                        "required": true
                    }
                ],
                "tags": [
                    "eda-credentials"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EdaCredentialTest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/EdaCredentialTest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/EdaCredentialTest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Test was successful."
                    },
                    "400": {
                        "description": "Test failed."
                    }
                }
            }
        },
        "/event-streams/": {
            "get": {
                "operationId": "event_streams_list",
                "description": "List all eventstreams",
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by event stream name."
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "test_mode",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter by the test_mode being true or false"
                    }
                ],
                "tags": [
                    "event-streams"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedEventStreamOutList"
                                }
                            }
                        },
                        "description": "Return a list of eventstreams."
                    }
                }
            },
            "post": {
                "operationId": "event_streams_create",
                "tags": [
                    "event-streams"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventStreamIn"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/EventStreamIn"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/EventStreamIn"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventStreamOut"
                                }
                            }
                        },
                        "description": "Return the new event stream."
                    },
                    "400": {
                        "description": "Invalid data to create event stream."
                    }
                }
            }
        },
        "/event-streams/{id}/activations/": {
            "get": {
                "operationId": "event_streams_activations_list",
                "description": "List all activations for the event stream",
                "parameters": [
                    {
                        "in": "query",
                        "name": "decision_environment_id",
                        "schema": {
                            "type": "number"
                        },
                        "description": "Filter by Decision Environment ID."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this event stream.",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by activation name."
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by activation status."
                    }
                ],
                "tags": [
                    "event-streams"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedActivationListList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/event-streams/{id}/": {
            "get": {
                "operationId": "event_streams_retrieve",
                "description": "Get the EventStream by its id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this event stream.",
                        "required": true
                    }
                ],
                "tags": [
                    "event-streams"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventStreamOut"
                                }
                            }
                        },
                        "description": "Return the event stream by its id."
                    }
                }
            },
            "patch": {
                "operationId": "event_streams_partial_update",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this event stream.",
                        "required": true
                    }
                ],
                "tags": [
                    "event-streams"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedEventStreamIn"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedEventStreamIn"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedEventStreamIn"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventStreamOut"
                                }
                            }
                        },
                        "description": "Update successful, return the new event stream."
                    },
                    "400": {
                        "description": "Unable to update event stream."
                    }
                }
            },
            "delete": {
                "operationId": "event_streams_destroy",
                "description": "Delete a EventStream by its id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this event stream.",
                        "required": true
                    }
                ],
                "tags": [
                    "event-streams"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete successful."
                    }
                }
            }
        },
        "/feature_flags_state/": {
            "get": {
                "operationId": "feature_flags_state_retrieve",
                "description": "A view class for displaying feature flags",
                "tags": [
                    "feature_flags_state"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/organizations/": {
            "get": {
                "operationId": "organizations_list",
                "description": "List all organizations.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "description",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by organization description."
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by organization name."
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "resource__ansible_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by resource ansible ID."
                    }
                ],
                "tags": [
                    "organizations"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedOrganizationList"
                                }
                            }
                        },
                        "description": "Return a list of organizations."
                    }
                }
            }
        },
        "/organizations/{id}/teams/": {
            "get": {
                "operationId": "organizations_teams_list",
                "description": "List all teams of the organization",
                "parameters": [
                    {
                        "in": "query",
                        "name": "description",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by team description."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this organization.",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by team name."
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "resource__ansible_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by resource ansible ID."
                    }
                ],
                "tags": [
                    "organizations"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedTeamList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/organizations/{id}/": {
            "get": {
                "operationId": "organizations_retrieve",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this organization.",
                        "required": true
                    }
                ],
                "tags": [
                    "organizations"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Organization"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/projects/": {
            "get": {
                "operationId": "projects_list",
                "description": "List all projects",
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by project name."
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "url",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by project url."
                    }
                ],
                "tags": [
                    "projects"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedProjectList"
                                }
                            }
                        },
                        "description": "Return a list of projects."
                    }
                }
            },
            "post": {
                "operationId": "projects_create",
                "description": "Import a project.",
                "tags": [
                    "projects"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectCreateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectCreateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectCreateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        },
                        "description": "Return a created project."
                    },
                    "409": {
                        "description": "Redis is unavailable."
                    }
                }
            }
        },
        "/projects/{id}/": {
            "get": {
                "operationId": "projects_retrieve",
                "description": "Get a project by id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this project.",
                        "required": true
                    }
                ],
                "tags": [
                    "projects"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectRead"
                                }
                            }
                        },
                        "description": "Return a project by id."
                    }
                }
            },
            "patch": {
                "operationId": "projects_partial_update",
                "description": "Partial update of a project",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this project.",
                        "required": true
                    }
                ],
                "tags": [
                    "projects"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedProjectUpdateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedProjectUpdateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedProjectUpdateRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        },
                        "description": "Update successful. Return an updated project."
                    },
                    "400": {
                        "description": "Update failed with bad request."
                    },
                    "409": {
                        "description": "Redis is unavailable."
                    }
                }
            },
            "delete": {
                "operationId": "projects_destroy",
                "description": "Delete a project by id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this project.",
                        "required": true
                    }
                ],
                "tags": [
                    "projects"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete successful."
                    }
                }
            }
        },
        "/projects/{id}/sync/": {
            "post": {
                "operationId": "projects_sync_create",
                "description": "Sync a project",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this project.",
                        "required": true
                    }
                ],
                "tags": [
                    "projects"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        },
                        "description": ""
                    },
                    "409": {
                        "description": "Redis is unavailable."
                    }
                }
            }
        },
        "/role_definitions/": {
            "get": {
                "operationId": "role_definitions_list",
                "description": "Role Definitions (roles) contain a list of permissions and can be used to\nassign those permissions to a user or team through the respective\nassignment endpoints.\n\nCustom roles can be created, modified, and deleted through this endpoint.\nSystem-managed roles are shown here, which cannot be edited or deleted,\nbut can be assigned to users.",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "A search term.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "role_definitions"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedRoleDefinitionList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "role_definitions_create",
                "description": "Create a RoleDefinition.",
                "tags": [
                    "role_definitions"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RoleDefinitionCreate"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/RoleDefinitionCreate"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/RoleDefinitionCreate"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RoleDefinition"
                                }
                            }
                        },
                        "description": "Return a created RoleDefinition."
                    }
                }
            }
        },
        "/role_definitions/{id}/": {
            "get": {
                "operationId": "role_definitions_retrieve",
                "description": "Role Definitions (roles) contain a list of permissions and can be used to\nassign those permissions to a user or team through the respective\nassignment endpoints.\n\nCustom roles can be created, modified, and deleted through this endpoint.\nSystem-managed roles are shown here, which cannot be edited or deleted,\nbut can be assigned to users.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this role definition.",
                        "required": true
                    }
                ],
                "tags": [
                    "role_definitions"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RoleDefinition"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "role_definitions_update",
                "description": "Update a RoleDefinition.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this role definition.",
                        "required": true
                    }
                ],
                "tags": [
                    "role_definitions"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RoleDefinitionCreate"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/RoleDefinitionCreate"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/RoleDefinitionCreate"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RoleDefinition"
                                }
                            }
                        },
                        "description": "Return an updated RoleDefinition."
                    }
                }
            },
            "patch": {
                "operationId": "role_definitions_partial_update",
                "description": "Role Definitions (roles) contain a list of permissions and can be used to\nassign those permissions to a user or team through the respective\nassignment endpoints.\n\nCustom roles can be created, modified, and deleted through this endpoint.\nSystem-managed roles are shown here, which cannot be edited or deleted,\nbut can be assigned to users.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this role definition.",
                        "required": true
                    }
                ],
                "tags": [
                    "role_definitions"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedRoleDefinition"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedRoleDefinition"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedRoleDefinition"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RoleDefinition"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "role_definitions_destroy",
                "description": "Role Definitions (roles) contain a list of permissions and can be used to\nassign those permissions to a user or team through the respective\nassignment endpoints.\n\nCustom roles can be created, modified, and deleted through this endpoint.\nSystem-managed roles are shown here, which cannot be edited or deleted,\nbut can be assigned to users.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this role definition.",
                        "required": true
                    }
                ],
                "tags": [
                    "role_definitions"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/role_definitions/{id}/team_assignments/": {
            "get": {
                "operationId": "role_definitions_team_assignments_list",
                "description": "Manage Role Team Assignment objects in the 'team_assignments' relationship of this particular Role Definition.\n\nStarting from the detail URL:\n\nGET /:id/team_assignments/ to show role team assignments currently in the relationship",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this assignment.",
                        "required": true
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "A search term.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "role_definitions"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedRoleTeamAssignmentList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/role_definitions/{id}/user_assignments/": {
            "get": {
                "operationId": "role_definitions_user_assignments_list",
                "description": "Manage Role User Assignment objects in the 'user_assignments' relationship of this particular Role Definition.\n\nStarting from the detail URL:\n\nGET /:id/user_assignments/ to show role user assignments currently in the relationship",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this assignment.",
                        "required": true
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "A search term.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "role_definitions"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedRoleUserAssignmentList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/role_metadata/": {
            "get": {
                "operationId": "role_metadata_retrieve",
                "description": "General data about models and permissions tracked by django-ansible-base RBAC\n\nInformation from this endpoint should be static given a server version.\nThis reflects model definitions, registrations with the permission registry,\nand enablement of RBAC features in settings.\n\nallowed_permissions: Valid permissions for a role of a given content_type",
                "tags": [
                    "role_metadata"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/role_team_access/{model_name}/{id}/": {
            "get": {
                "operationId": "role_team_access_list",
                "description": "Use this endpoint to get a list of users who have access to a resource.\nThis is a list-only view that provides a list of users, plus extra data.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+|[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})$"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "model_name",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "A search term.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "role_team_access"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedTeamAccessViewSet_Team_List"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/role_team_access/{model_name}/{id}/{actor_pk}/": {
            "get": {
                "operationId": "role_team_access_list_2",
                "description": "This gives drill-down information about the means of inheritance\nfor all the permissions show in the higher-level view of the access list",
                "parameters": [
                    {
                        "in": "path",
                        "name": "actor_pk",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+|[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})$"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "model_name",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "A search term.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "role_team_access"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedTeamAccessAssignmentList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/role_team_assignments/": {
            "get": {
                "operationId": "role_team_assignments_list",
                "description": "Use this endpoint to give a team permission to a resource or an organization.\nThe needed data is the team, the role definition, and the object id.\nThe object must be of the type specified in the role definition.\nThe type given in the role definition and the provided object_id are used\nto look up the resource.\n\nAfter creation, the assignment cannot be edited, but can be deleted to\nremove those permissions.",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "A search term.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "role_team_assignments"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedRoleTeamAssignmentList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "role_team_assignments_create",
                "description": "Create a RoleTeamAssignment.",
                "tags": [
                    "role_team_assignments"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RoleTeamAssignmentCreate"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/RoleTeamAssignmentCreate"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/RoleTeamAssignmentCreate"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RoleTeamAssignment"
                                }
                            }
                        },
                        "description": "Return a created RoleTeamAssignment."
                    }
                }
            }
        },
        "/role_team_assignments/{id}/": {
            "get": {
                "operationId": "role_team_assignments_retrieve",
                "description": "Use this endpoint to give a team permission to a resource or an organization.\nThe needed data is the team, the role definition, and the object id.\nThe object must be of the type specified in the role definition.\nThe type given in the role definition and the provided object_id are used\nto look up the resource.\n\nAfter creation, the assignment cannot be edited, but can be deleted to\nremove those permissions.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this role team assignment.",
                        "required": true
                    }
                ],
                "tags": [
                    "role_team_assignments"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RoleTeamAssignment"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "role_team_assignments_destroy",
                "description": "Use this endpoint to give a team permission to a resource or an organization.\nThe needed data is the team, the role definition, and the object id.\nThe object must be of the type specified in the role definition.\nThe type given in the role definition and the provided object_id are used\nto look up the resource.\n\nAfter creation, the assignment cannot be edited, but can be deleted to\nremove those permissions.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this role team assignment.",
                        "required": true
                    }
                ],
                "tags": [
                    "role_team_assignments"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/role_user_access/{model_name}/{id}/": {
            "get": {
                "operationId": "role_user_access_list",
                "description": "Use this endpoint to get a list of users who have access to a resource.\nThis is a list-only view that provides a list of users, plus extra data.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+|[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})$"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "model_name",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "A search term.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "role_user_access"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedUserAccessViewSet_User_List"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/role_user_access/{model_name}/{id}/{actor_pk}/": {
            "get": {
                "operationId": "role_user_access_list_2",
                "description": "This gives drill-down information about the means of inheritance\nfor all the permissions show in the higher-level view of the access list",
                "parameters": [
                    {
                        "in": "path",
                        "name": "actor_pk",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+|[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})$"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "model_name",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "A search term.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "role_user_access"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedUserAccessAssignmentList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/role_user_assignments/": {
            "get": {
                "operationId": "role_user_assignments_list",
                "description": "Use this endpoint to give a user permission to a resource or an organization.\nThe needed data is the user, the role definition, and the object id.\nThe object must be of the type specified in the role definition.\nThe type given in the role definition and the provided object_id are used\nto look up the resource.\n\nAfter creation, the assignment cannot be edited, but can be deleted to\nremove those permissions.",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "A search term.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "role_user_assignments"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedRoleUserAssignmentList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "role_user_assignments_create",
                "description": "Create a RoleUserAssignment.",
                "tags": [
                    "role_user_assignments"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RoleUserAssignmentCreate"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/RoleUserAssignmentCreate"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/RoleUserAssignmentCreate"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RoleUserAssignment"
                                }
                            }
                        },
                        "description": "Return a created RoleUserAssignment."
                    }
                }
            }
        },
        "/role_user_assignments/{id}/": {
            "get": {
                "operationId": "role_user_assignments_retrieve",
                "description": "Use this endpoint to give a user permission to a resource or an organization.\nThe needed data is the user, the role definition, and the object id.\nThe object must be of the type specified in the role definition.\nThe type given in the role definition and the provided object_id are used\nto look up the resource.\n\nAfter creation, the assignment cannot be edited, but can be deleted to\nremove those permissions.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this role user assignment.",
                        "required": true
                    }
                ],
                "tags": [
                    "role_user_assignments"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RoleUserAssignment"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "role_user_assignments_destroy",
                "description": "Use this endpoint to give a user permission to a resource or an organization.\nThe needed data is the user, the role definition, and the object id.\nThe object must be of the type specified in the role definition.\nThe type given in the role definition and the provided object_id are used\nto look up the resource.\n\nAfter creation, the assignment cannot be edited, but can be deleted to\nremove those permissions.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this role user assignment.",
                        "required": true
                    }
                ],
                "tags": [
                    "role_user_assignments"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/rulebooks/": {
            "get": {
                "operationId": "rulebooks_list",
                "description": "List all rulebooks",
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by rulebook name."
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "project_id",
                        "schema": {
                            "type": "number"
                        },
                        "description": "Filter by rulebook's project id."
                    }
                ],
                "tags": [
                    "rulebooks"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedRulebookList"
                                }
                            }
                        },
                        "description": "Return a list of rulebooks."
                    }
                }
            }
        },
        "/rulebooks/{id}/sources/": {
            "get": {
                "operationId": "rulebooks_sources_list",
                "description": "Source list of a rulebook by its id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this rulebook.",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by rulebook name."
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "project_id",
                        "schema": {
                            "type": "number"
                        },
                        "description": "Filter by rulebook's project id."
                    }
                ],
                "tags": [
                    "rulebooks"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedSourceList"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "description": "Rulebook not parseable."
                    }
                }
            }
        },
        "/rulebooks/{id}/": {
            "get": {
                "operationId": "rulebooks_retrieve",
                "description": "Get the rulebook by its id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this rulebook.",
                        "required": true
                    }
                ],
                "tags": [
                    "rulebooks"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Rulebook"
                                }
                            }
                        },
                        "description": "Return the rulebook by its id."
                    }
                }
            }
        },
        "/rulebooks/{id}/json/": {
            "get": {
                "operationId": "rulebooks_json_retrieve",
                "description": "Get the JSON format of a rulebook by its id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this rulebook.",
                        "required": true
                    }
                ],
                "tags": [
                    "rulebooks"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Rulebook"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/service-index/": {
            "get": {
                "operationId": "service_index_retrieve",
                "description": "Link other resource registry endpoints",
                "tags": [
                    "service-index"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/service-index/metadata/": {
            "get": {
                "operationId": "service_index_metadata_retrieve",
                "tags": [
                    "service-index"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/service-index/object-delete/": {
            "post": {
                "operationId": "service_index_object_delete_create",
                "description": "Delete all role assignments (user and team) for a specific resource.\n\nExpected request data:\n{\n    \"resource_type\": \"main.inventory\",\n    \"resource_pk\": \"4\"\n}",
                "tags": [
                    "service-index"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "201": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/service-index/resource-types/": {
            "get": {
                "operationId": "service_index_resource_types_list",
                "description": "Index of the resource types that are configured in the system.",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "service-index"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedResourceTypeList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/service-index/resource-types/{name}/": {
            "get": {
                "operationId": "service_index_resource_types_retrieve",
                "description": "Index of the resource types that are configured in the system.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "schema": {
                            "type": "string",
                            "pattern": "^[^/]+$"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "service-index"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceType"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/service-index/resource-types/{name}/manifest/": {
            "get": {
                "operationId": "service_index_resource_types_manifest_retrieve",
                "description": "Returns the as a stream the csv of resource_id,hash for a given resource type.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "schema": {
                            "type": "string",
                            "pattern": "^[^/]+$"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "service-index"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceType"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/service-index/resources/": {
            "get": {
                "operationId": "service_index_resources_list",
                "description": "Index of all the resources in the system.",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "service-index"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedResourceListList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "service_index_resources_create",
                "description": "Index of all the resources in the system.",
                "tags": [
                    "service-index"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Resource"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Resource"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Resource"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Resource"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/service-index/resources/{ansible_id}/": {
            "get": {
                "operationId": "service_index_resources_retrieve",
                "description": "Index of all the resources in the system.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "ansible_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "A unique ID identifying this resource by the resource server."
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "service-index"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Resource"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "service_index_resources_update",
                "description": "Index of all the resources in the system.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "ansible_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "A unique ID identifying this resource by the resource server."
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "service-index"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Resource"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Resource"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Resource"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Resource"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "service_index_resources_partial_update",
                "description": "Index of all the resources in the system.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "ansible_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "A unique ID identifying this resource by the resource server."
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "service-index"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedResource"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedResource"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedResource"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Resource"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "service_index_resources_destroy",
                "description": "Index of all the resources in the system.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "ansible_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "A unique ID identifying this resource by the resource server."
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "service-index"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/service-index/role-permissions/": {
            "get": {
                "operationId": "service_index_role_permissions_list",
                "description": "List of permissions managed with the RBAC system",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "A search term.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "service-index"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedDABPermissionList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/service-index/role-team-assignments/": {
            "get": {
                "operationId": "service_index_role_team_assignments_list",
                "description": "List of team role assignments for cross-service communication",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "A search term.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "service-index"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedServiceRoleTeamAssignmentList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/service-index/role-team-assignments/assign/": {
            "post": {
                "operationId": "service_index_role_team_assignments_assign_create",
                "description": "List of team role assignments for cross-service communication",
                "tags": [
                    "service-index"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceRoleTeamAssignment"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceRoleTeamAssignment"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceRoleTeamAssignment"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceRoleTeamAssignment"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/service-index/role-team-assignments/unassign/": {
            "post": {
                "operationId": "service_index_role_team_assignments_unassign_create",
                "description": "List of team role assignments for cross-service communication",
                "tags": [
                    "service-index"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceRoleTeamAssignment"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceRoleTeamAssignment"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceRoleTeamAssignment"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceRoleTeamAssignment"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/service-index/role-types/": {
            "get": {
                "operationId": "service_index_role_types_list",
                "description": "List of types registered with the RBAC system, or loaded in from external system",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "A search term.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "service-index"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedDABContentTypeList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/service-index/role-user-assignments/": {
            "get": {
                "operationId": "service_index_role_user_assignments_list",
                "description": "List of user assignments for cross-service communication",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "A search term.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "service-index"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedServiceRoleUserAssignmentList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/service-index/role-user-assignments/assign/": {
            "post": {
                "operationId": "service_index_role_user_assignments_assign_create",
                "description": "List of user assignments for cross-service communication",
                "tags": [
                    "service-index"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceRoleUserAssignment"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceRoleUserAssignment"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceRoleUserAssignment"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceRoleUserAssignment"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/service-index/role-user-assignments/unassign/": {
            "post": {
                "operationId": "service_index_role_user_assignments_unassign_create",
                "description": "List of user assignments for cross-service communication",
                "tags": [
                    "service-index"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceRoleUserAssignment"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceRoleUserAssignment"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceRoleUserAssignment"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceRoleUserAssignment"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/status/": {
            "get": {
                "operationId": "status_retrieve",
                "description": "Get the current status of EDA.",
                "tags": [
                    "status"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StatusResponse"
                                }
                            }
                        },
                        "description": ""
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StatusResponse"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/teams/": {
            "get": {
                "operationId": "teams_list",
                "description": "List all teams.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "description",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by team description."
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by team name."
                    },
                    {
                        "in": "query",
                        "name": "organization_id",
                        "schema": {
                            "type": "number"
                        },
                        "description": "Filter by organization ID."
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "resource__ansible_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by resource ansible ID."
                    }
                ],
                "tags": [
                    "teams"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedTeamList"
                                }
                            }
                        },
                        "description": "Return a list of teams."
                    }
                }
            }
        },
        "/teams/{id}/": {
            "get": {
                "operationId": "teams_retrieve",
                "description": "Get team by its id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this team.",
                        "required": true
                    }
                ],
                "tags": [
                    "teams"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TeamDetail"
                                }
                            }
                        },
                        "description": "Return a team by its id."
                    }
                }
            }
        },
        "/users/": {
            "get": {
                "operationId": "users_list",
                "description": "List users",
                "parameters": [
                    {
                        "in": "query",
                        "name": "is_superuser",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter by superuser status."
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by Username."
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "resource__ansible_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by resource ansible ID."
                    },
                    {
                        "in": "query",
                        "name": "username",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "users"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedUserListList"
                                }
                            }
                        },
                        "description": "Return a list of users."
                    }
                }
            }
        },
        "/users/{id}/": {
            "get": {
                "operationId": "users_retrieve",
                "description": "Retrieve a user by their id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this user.",
                        "required": true
                    }
                ],
                "tags": [
                    "users"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserDetail"
                                }
                            }
                        },
                        "description": "Return a user."
                    }
                }
            },
            "patch": {
                "operationId": "users_partial_update",
                "description": "Partial update of a user.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this user.",
                        "required": true
                    }
                ],
                "tags": [
                    "users"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedUserUpdateIsSuperuser"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedUserUpdateIsSuperuser"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedUserUpdateIsSuperuser"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserDetail"
                                }
                            }
                        },
                        "description": "Update successful. Return an updated user."
                    },
                    "403": {
                        "description": "Update is prohibited"
                    }
                }
            }
        },
        "/users/me/": {
            "get": {
                "operationId": "get_current_user",
                "description": "Get current user.",
                "tags": [
                    "users"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserDetail"
                                }
                            }
                        },
                        "description": "Return current user."
                    }
                }
            }
        },
        "/users/me/awx-tokens/": {
            "get": {
                "operationId": "users_me_awx_tokens_list",
                "description": "List current user AWX tokens.",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "A search term.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "users"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedAwxTokenList"
                                }
                            }
                        },
                        "description": "Return a list of AWX tokens."
                    }
                }
            },
            "post": {
                "operationId": "users_me_awx_tokens_create",
                "description": "Create a AWX token for a current user.",
                "tags": [
                    "users"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AwxTokenCreate"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/AwxTokenCreate"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/AwxTokenCreate"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AwxToken"
                                }
                            }
                        },
                        "description": "Return the created AWX token."
                    }
                }
            }
        },
        "/users/me/awx-tokens/{id}/": {
            "get": {
                "operationId": "users_me_awx_tokens_retrieve",
                "description": "Get current user AWX token by ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this token.",
                        "required": true
                    }
                ],
                "tags": [
                    "users"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AwxToken"
                                }
                            }
                        },
                        "description": "Return a AWX tokens."
                    }
                }
            },
            "delete": {
                "operationId": "users_me_awx_tokens_destroy",
                "description": "Delete AWX token of a current user by ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this token.",
                        "required": true
                    }
                ],
                "tags": [
                    "users"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "EDAJWTAuthentication": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The AWX token has been deleted."
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "ActivationCopy": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "ActivationCreate": {
                "type": "object",
                "description": "Serializer for creating the Activation.",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "is_enabled": {
                        "type": "boolean"
                    },
                    "decision_environment_id": {
                        "type": "integer"
                    },
                    "rulebook_id": {
                        "type": "integer"
                    },
                    "extra_var": {
                        "type": "string",
                        "nullable": true
                    },
                    "organization_id": {
                        "type": "integer"
                    },
                    "restart_policy": {
                        "$ref": "#/components/schemas/RestartPolicyEnum"
                    },
                    "awx_token_id": {
                        "type": "integer",
                        "nullable": true
                    },
                    "log_level": {
                        "$ref": "#/components/schemas/LogLevelEnum"
                    },
                    "eda_credentials": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "k8s_service_name": {
                        "type": "string",
                        "nullable": true
                    },
                    "source_mappings": {
                        "type": "string",
                        "description": "Mapping between sources and event streams"
                    },
                    "skip_audit_events": {
                        "type": "boolean",
                        "description": "Skip audit events for activation"
                    }
                },
                "required": [
                    "decision_environment_id",
                    "name",
                    "organization_id",
                    "rulebook_id"
                ]
            },
            "ActivationInstance": {
                "type": "object",
                "description": "Serializer for the Activation Instance model.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/StatusEnum"
                    },
                    "git_hash": {
                        "type": "string"
                    },
                    "status_message": {
                        "type": "string",
                        "nullable": true
                    },
                    "activation_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true
                    },
                    "organization_id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "started_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "ended_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true
                    },
                    "queue_name": {
                        "type": "string",
                        "readOnly": true,
                        "nullable": true
                    }
                },
                "required": [
                    "activation_id",
                    "ended_at",
                    "id",
                    "organization_id",
                    "queue_name",
                    "started_at"
                ]
            },
            "ActivationInstanceLog": {
                "type": "object",
                "description": "Serializer for the Activation Instance Log model.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "log": {
                        "type": "string"
                    },
                    "log_timestamp": {
                        "type": "integer",
                        "maximum": 9223372036854775807,
                        "minimum": -9223372036854775808,
                        "format": "int64"
                    },
                    "log_created_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "activation_instance": {
                        "type": "integer"
                    }
                },
                "required": [
                    "activation_instance",
                    "id",
                    "log"
                ]
            },
            "ActivationList": {
                "type": "object",
                "description": "Serializer for listing the Activation model objects.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "is_enabled": {
                        "type": "boolean"
                    },
                    "status": {
                        "$ref": "#/components/schemas/StatusEnum"
                    },
                    "extra_var": {
                        "type": "string",
                        "nullable": true
                    },
                    "decision_environment_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true
                    },
                    "project_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true
                    },
                    "rulebook_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true
                    },
                    "organization_id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "restart_policy": {
                        "$ref": "#/components/schemas/RestartPolicyEnum"
                    },
                    "restart_count": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648
                    },
                    "rulebook_name": {
                        "type": "string",
                        "description": "Name of the referenced rulebook"
                    },
                    "current_job_id": {
                        "type": "string",
                        "nullable": true
                    },
                    "rules_count": {
                        "type": "integer"
                    },
                    "rules_fired_count": {
                        "type": "integer"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "edited_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "created_by": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "username": {
                                "type": "string"
                            },
                            "first_name": {
                                "type": "string"
                            },
                            "last_name": {
                                "type": "string"
                            }
                        }
                    },
                    "modified_by": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "username": {
                                "type": "string"
                            },
                            "first_name": {
                                "type": "string"
                            },
                            "last_name": {
                                "type": "string"
                            }
                        }
                    },
                    "edited_by": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "username": {
                                "type": "string"
                            },
                            "first_name": {
                                "type": "string"
                            },
                            "last_name": {
                                "type": "string"
                            }
                        }
                    },
                    "status_message": {
                        "type": "string",
                        "nullable": true
                    },
                    "awx_token_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true
                    },
                    "log_level": {
                        "$ref": "#/components/schemas/LogLevelEnum"
                    },
                    "eda_credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EdaCredential"
                        },
                        "nullable": true
                    },
                    "k8s_service_name": {
                        "type": "string",
                        "nullable": true,
                        "description": "Service name of the activation"
                    },
                    "event_streams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EventStreamOut"
                        },
                        "nullable": true
                    },
                    "source_mappings": {
                        "type": "string",
                        "description": "Mapping between sources and event streams"
                    },
                    "skip_audit_events": {
                        "type": "boolean",
                        "description": "Skip audit events for activation"
                    },
                    "log_tracking_id": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "required": [
                    "awx_token_id",
                    "created_at",
                    "created_by",
                    "decision_environment_id",
                    "edited_by",
                    "id",
                    "log_tracking_id",
                    "modified_at",
                    "modified_by",
                    "name",
                    "organization_id",
                    "project_id",
                    "rulebook_id",
                    "rulebook_name",
                    "rules_count",
                    "rules_fired_count"
                ]
            },
            "ActivationRead": {
                "type": "object",
                "description": "Serializer for reading the Activation with related objects info.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "is_enabled": {
                        "type": "boolean"
                    },
                    "decision_environment": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/DecisionEnvironmentRef"
                            }
                        ],
                        "nullable": true
                    },
                    "status": {
                        "$ref": "#/components/schemas/StatusEnum"
                    },
                    "git_hash": {
                        "type": "string"
                    },
                    "project": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ProjectRef"
                            }
                        ],
                        "nullable": true
                    },
                    "rulebook": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RulebookRef"
                            }
                        ],
                        "nullable": true
                    },
                    "extra_var": {
                        "type": "string",
                        "nullable": true
                    },
                    "organization": {
                        "$ref": "#/components/schemas/OrganizationRef"
                    },
                    "instances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ActivationInstance"
                        }
                    },
                    "restart_policy": {
                        "$ref": "#/components/schemas/RestartPolicyEnum"
                    },
                    "restart_count": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648
                    },
                    "rulebook_name": {
                        "type": "string",
                        "description": "Name of the referenced rulebook"
                    },
                    "current_job_id": {
                        "type": "string",
                        "nullable": true
                    },
                    "ruleset_stats": {
                        "type": "string",
                        "description": "The stat information about the activation"
                    },
                    "rules_count": {
                        "type": "integer"
                    },
                    "rules_fired_count": {
                        "type": "integer"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "edited_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "created_by": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "username": {
                                "type": "string"
                            },
                            "first_name": {
                                "type": "string"
                            },
                            "last_name": {
                                "type": "string"
                            }
                        }
                    },
                    "modified_by": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "username": {
                                "type": "string"
                            },
                            "first_name": {
                                "type": "string"
                            },
                            "last_name": {
                                "type": "string"
                            }
                        }
                    },
                    "edited_by": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "username": {
                                "type": "string"
                            },
                            "first_name": {
                                "type": "string"
                            },
                            "last_name": {
                                "type": "string"
                            }
                        }
                    },
                    "restarted_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "status_message": {
                        "type": "string",
                        "nullable": true
                    },
                    "awx_token_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true
                    },
                    "eda_credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EdaCredential"
                        },
                        "nullable": true
                    },
                    "log_level": {
                        "$ref": "#/components/schemas/LogLevelEnum"
                    },
                    "k8s_service_name": {
                        "type": "string",
                        "nullable": true,
                        "description": "Service name of the activation"
                    },
                    "event_streams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EventStreamOut"
                        },
                        "nullable": true
                    },
                    "source_mappings": {
                        "type": "string",
                        "description": "Mapping between sources and event streams"
                    },
                    "skip_audit_events": {
                        "type": "boolean",
                        "description": "Skip audit events for activation"
                    },
                    "log_tracking_id": {
                        "type": "string",
                        "nullable": true,
                        "description": "Log tracking ID of the activation"
                    }
                },
                "required": [
                    "awx_token_id",
                    "created_at",
                    "created_by",
                    "edited_by",
                    "id",
                    "instances",
                    "modified_at",
                    "modified_by",
                    "name",
                    "organization",
                    "rulebook_name",
                    "rules_count",
                    "rules_fired_count",
                    "ruleset_stats"
                ]
            },
            "AuditAction": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "UUID of the triggered action"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the action"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the action"
                    },
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "description": "The URL in the action"
                    },
                    "fired_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The fired timestamp of the action"
                    },
                    "rule_fired_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "audit_rule_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true
                    },
                    "status_message": {
                        "type": "string",
                        "nullable": true,
                        "description": "Message of the action"
                    }
                },
                "required": [
                    "audit_rule_id",
                    "fired_at",
                    "id",
                    "name"
                ]
            },
            "AuditEvent": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "UUID of the triggered event"
                    },
                    "source_name": {
                        "type": "string",
                        "description": "Name of the source"
                    },
                    "source_type": {
                        "type": "string",
                        "description": "Type of the source"
                    },
                    "payload": {
                        "type": "string",
                        "nullable": true,
                        "description": "The payload in the event"
                    },
                    "audit_actions": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    "received_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The received timestamp of the event"
                    },
                    "rule_fired_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    }
                },
                "required": [
                    "audit_actions",
                    "id",
                    "received_at",
                    "source_name",
                    "source_type"
                ]
            },
            "AuditRuleDetail": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the fired rule"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the fired rule"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the fired rule"
                    },
                    "activation_instance": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "nullable": true
                            },
                            "name": {
                                "type": "string"
                            }
                        },
                        "example": {
                            "id": 0,
                            "name": "string"
                        },
                        "readOnly": true
                    },
                    "organization": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "nullable": false
                            },
                            "name": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            }
                        },
                        "example": {
                            "id": 0,
                            "name": "string",
                            "description": "string"
                        },
                        "readOnly": true
                    },
                    "ruleset_name": {
                        "type": "string",
                        "description": "Name of the related ruleset"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The created timestamp of the action"
                    },
                    "fired_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The fired timestamp of the rule"
                    }
                },
                "required": [
                    "activation_instance",
                    "created_at",
                    "fired_at",
                    "id",
                    "name",
                    "organization"
                ]
            },
            "AuditRuleList": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the fired rule"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the fired rule"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the fired rule"
                    },
                    "activation_instance": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "nullable": true
                            },
                            "name": {
                                "type": "string"
                            }
                        },
                        "example": {
                            "id": 0,
                            "name": "string"
                        },
                        "readOnly": true
                    },
                    "organization": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "nullable": false
                            },
                            "name": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            }
                        },
                        "example": {
                            "id": 0,
                            "name": "string",
                            "description": "string"
                        },
                        "readOnly": true
                    },
                    "fired_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The fired timestamp of the rule"
                    }
                },
                "required": [
                    "activation_instance",
                    "fired_at",
                    "id",
                    "name",
                    "organization"
                ]
            },
            "AwxToken": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "user_id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "created_at",
                    "id",
                    "modified_at",
                    "name",
                    "user_id"
                ]
            },
            "AwxTokenCreate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "token": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "token"
                ]
            },
            "Config": {
                "type": "object",
                "description": "Serializer for ConfigView response.",
                "properties": {
                    "time_zone": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "deployment_type": {
                        "type": "string"
                    }
                },
                "required": [
                    "deployment_type",
                    "time_zone",
                    "version"
                ]
            },
            "CredentialInputSource": {
                "type": "object",
                "description": "Serializer used during a GET.",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "metadata": {
                        "type": "string"
                    },
                    "references": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EdaCredentialReference"
                        },
                        "nullable": true
                    },
                    "created_by": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "username": {
                                "type": "string"
                            },
                            "first_name": {
                                "type": "string"
                            },
                            "last_name": {
                                "type": "string"
                            }
                        }
                    },
                    "modified_by": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "username": {
                                "type": "string"
                            },
                            "first_name": {
                                "type": "string"
                            },
                            "last_name": {
                                "type": "string"
                            }
                        }
                    },
                    "input_field_name": {
                        "type": "string",
                        "maxLength": 1024
                    },
                    "source_credential": {
                        "type": "integer",
                        "nullable": true,
                        "description": "External credential"
                    },
                    "target_credential": {
                        "type": "integer",
                        "nullable": true,
                        "description": "Non external credential"
                    },
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "organization": {
                        "$ref": "#/components/schemas/OrganizationRef"
                    }
                },
                "required": [
                    "created_at",
                    "created_by",
                    "id",
                    "input_field_name",
                    "modified_at",
                    "modified_by",
                    "organization",
                    "target_credential"
                ]
            },
            "CredentialInputSourceCreate": {
                "type": "object",
                "description": "Serializer used during the Create process of the instance.",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": true
                    },
                    "target_credential": {
                        "type": "integer"
                    },
                    "source_credential": {
                        "type": "integer"
                    },
                    "input_field_name": {
                        "type": "string",
                        "maxLength": 1024
                    },
                    "organization_id": {
                        "type": "integer"
                    }
                },
                "required": [
                    "input_field_name",
                    "metadata",
                    "organization_id",
                    "source_credential",
                    "target_credential"
                ]
            },
            "CredentialType": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string",
                        "nullable": true
                    },
                    "kind": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "inputs": {
                        "type": "object",
                        "additionalProperties": true
                    },
                    "injectors": {
                        "type": "object",
                        "additionalProperties": true
                    },
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "managed": {
                        "type": "boolean",
                        "readOnly": true
                    }
                },
                "required": [
                    "created_at",
                    "id",
                    "managed",
                    "modified_at",
                    "name"
                ]
            },
            "CredentialTypeCreate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "inputs": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Inputs of the credential type"
                    },
                    "injectors": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Injectors of the credential type"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "CredentialTypeRef": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string",
                        "nullable": true
                    },
                    "kind": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "name"
                ]
            },
            "CredentialTypeTest": {
                "type": "object",
                "properties": {
                    "inputs": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Inputs of the credential type for test"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Metadata of the credential type for testing"
                    }
                },
                "required": [
                    "inputs"
                ]
            },
            "DABContentType": {
                "type": "object",
                "properties": {
                    "api_slug": {
                        "type": "string",
                        "description": "String to use for references to this type from other models in the API.",
                        "maxLength": 201
                    },
                    "service": {
                        "type": "string",
                        "description": "service namespace to track what service this type is for. Can have a value of shared, which indicates it is synchronized.",
                        "maxLength": 100
                    },
                    "app_label": {
                        "type": "string",
                        "description": "Django app that the model is in. This is an internal technical detail that does not affect API use.",
                        "maxLength": 100
                    },
                    "model": {
                        "type": "string",
                        "description": "Name of the type according to the Django ORM Meta model_name convention. Comes from the python class, but lowercase with no spaces.",
                        "maxLength": 100
                    },
                    "parent_content_type": {
                        "type": "string",
                        "description": "String to use for references to this type from other models in the API.",
                        "readOnly": true
                    },
                    "pk_field_type": {
                        "type": "string",
                        "description": "Database field type of the primary key field of the model, relevant for interal logic tracking permissions.",
                        "maxLength": 100
                    }
                },
                "required": [
                    "app_label",
                    "model",
                    "parent_content_type"
                ]
            },
            "DABPermission": {
                "type": "object",
                "properties": {
                    "api_slug": {
                        "type": "string",
                        "description": "String to use for references to this type from other models in the API.",
                        "maxLength": 201
                    },
                    "codename": {
                        "type": "string",
                        "description": "A codename for the permission, in the format {action}_{model_name}. Where action is typically the view set action (view/list/etc) from Django rest framework.",
                        "maxLength": 100
                    },
                    "content_type": {
                        "type": "string",
                        "description": "String to use for references to this type from other models in the API.",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this permission.",
                        "maxLength": 255
                    }
                },
                "required": [
                    "codename",
                    "content_type",
                    "name"
                ]
            },
            "DecisionEnvironment": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "image_url": {
                        "type": "string"
                    },
                    "organization_id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "eda_credential_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true
                    },
                    "pull_policy": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/PullPolicyEnum"
                            }
                        ],
                        "description": "Pull policy for the image before running\n\n* `always` - Always pull container before running.\n* `missing` - Only pull the image if not present before running.\n* `never` - Never pull container before running."
                    },
                    "created_by": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "username": {
                                "type": "string"
                            },
                            "first_name": {
                                "type": "string"
                            },
                            "last_name": {
                                "type": "string"
                            }
                        }
                    },
                    "modified_by": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "username": {
                                "type": "string"
                            },
                            "first_name": {
                                "type": "string"
                            },
                            "last_name": {
                                "type": "string"
                            }
                        }
                    },
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "created_at",
                    "created_by",
                    "eda_credential_id",
                    "id",
                    "image_url",
                    "modified_at",
                    "modified_by",
                    "name",
                    "organization_id"
                ]
            },
            "DecisionEnvironmentCreate": {
                "type": "object",
                "description": "Serializer for creating the DecisionEnvironment.",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "image_url": {
                        "type": "string"
                    },
                    "organization_id": {
                        "type": "integer"
                    },
                    "eda_credential_id": {
                        "type": "integer",
                        "nullable": true
                    },
                    "pull_policy": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/PullPolicyEnum"
                            }
                        ],
                        "description": "Pull policy for the image before running\n\n* `always` - Always pull container before running.\n* `missing` - Only pull the image if not present before running.\n* `never` - Never pull container before running."
                    }
                },
                "required": [
                    "image_url",
                    "name",
                    "organization_id"
                ]
            },
            "DecisionEnvironmentRead": {
                "type": "object",
                "description": "Serializer for reading the DecisionEnvironment with embedded objects.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "image_url": {
                        "type": "string"
                    },
                    "organization": {
                        "$ref": "#/components/schemas/OrganizationRef"
                    },
                    "eda_credential": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/EdaCredentialRef"
                            }
                        ],
                        "nullable": true
                    },
                    "pull_policy": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/PullPolicyEnum"
                            }
                        ],
                        "description": "Pull policy for the image before running\n\n* `always` - Always pull container before running.\n* `missing` - Only pull the image if not present before running.\n* `never` - Never pull container before running."
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "created_by": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "username": {
                                "type": "string"
                            },
                            "first_name": {
                                "type": "string"
                            },
                            "last_name": {
                                "type": "string"
                            }
                        }
                    },
                    "modified_by": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "username": {
                                "type": "string"
                            },
                            "first_name": {
                                "type": "string"
                            },
                            "last_name": {
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "created_at",
                    "created_by",
                    "id",
                    "image_url",
                    "modified_at",
                    "modified_by",
                    "name",
                    "organization"
                ]
            },
            "DecisionEnvironmentRef": {
                "type": "object",
                "description": "Serializer for DecisionEnvironment reference.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "image_url": {
                        "type": "string"
                    },
                    "pull_policy": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/PullPolicyEnum"
                            }
                        ],
                        "description": "Pull policy for the image before running\n\n* `always` - Always pull container before running.\n* `missing` - Only pull the image if not present before running.\n* `never` - Never pull container before running."
                    },
                    "organization_id": {
                        "type": "integer",
                        "readOnly": true
                    }
                },
                "required": [
                    "id",
                    "image_url",
                    "name",
                    "organization_id"
                ]
            },
            "EdaCredential": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "inputs": {
                        "type": "object",
                        "additionalProperties": true,
                        "readOnly": true
                    },
                    "credential_type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/CredentialTypeRef"
                            }
                        ],
                        "nullable": true
                    },
                    "references": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EdaCredentialReference"
                        },
                        "nullable": true
                    },
                    "created_by": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "username": {
                                "type": "string"
                            },
                            "first_name": {
                                "type": "string"
                            },
                            "last_name": {
                                "type": "string"
                            }
                        }
                    },
                    "modified_by": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "username": {
                                "type": "string"
                            },
                            "first_name": {
                                "type": "string"
                            },
                            "last_name": {
                                "type": "string"
                            }
                        }
                    },
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "managed": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "organization": {
                        "$ref": "#/components/schemas/OrganizationRef"
                    }
                },
                "required": [
                    "created_at",
                    "created_by",
                    "id",
                    "inputs",
                    "managed",
                    "modified_at",
                    "modified_by",
                    "name",
                    "organization"
                ]
            },
            "EdaCredentialCopy": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the new credintial"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "EdaCredentialCreate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "inputs": {
                        "type": "object",
                        "additionalProperties": true
                    },
                    "credential_type_id": {
                        "type": "integer"
                    },
                    "organization_id": {
                        "type": "integer"
                    }
                },
                "required": [
                    "credential_type_id",
                    "inputs",
                    "name",
                    "organization_id"
                ]
            },
            "EdaCredentialRef": {
                "type": "object",
                "description": "Serializer for EdaCredential reference.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "inputs": {
                        "type": "object",
                        "additionalProperties": true,
                        "readOnly": true
                    },
                    "managed": {
                        "type": "boolean"
                    },
                    "credential_type_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true
                    },
                    "organization_id": {
                        "type": "integer",
                        "readOnly": true
                    }
                },
                "required": [
                    "credential_type_id",
                    "id",
                    "inputs",
                    "name",
                    "organization_id"
                ]
            },
            "EdaCredentialReference": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Type of the related resource"
                    },
                    "id": {
                        "type": "integer",
                        "description": "ID of the related resource"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the related resource"
                    },
                    "uri": {
                        "type": "string",
                        "format": "uri",
                        "description": "URI of the related resource"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "type",
                    "uri"
                ]
            },
            "EdaCredentialTest": {
                "type": "object",
                "description": "Serializer for the Credential Test.",
                "properties": {
                    "metadata": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Metadata of the credential for testing"
                    }
                }
            },
            "EventStreamIn": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "test_mode": {
                        "type": "boolean",
                        "description": "Enable test mode"
                    },
                    "additional_data_headers": {
                        "type": "string",
                        "description": "The additional http headers which will be added to the event data. The headers are comma delimited"
                    },
                    "eda_credential_id": {
                        "type": "integer"
                    },
                    "organization_id": {
                        "type": "integer"
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    }
                },
                "required": [
                    "eda_credential_id",
                    "name",
                    "organization_id"
                ]
            },
            "EventStreamOut": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "test_mode": {
                        "type": "boolean",
                        "description": "Enable test mode"
                    },
                    "additional_data_headers": {
                        "type": "string",
                        "description": "The additional http headers which will be added to the event data. The headers are comma delimited"
                    },
                    "organization": {
                        "type": "string",
                        "readOnly": true
                    },
                    "eda_credential": {
                        "$ref": "#/components/schemas/EdaCredentialRef"
                    },
                    "event_stream_type": {
                        "type": "string",
                        "description": "The type of the event stream based on credential type"
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_by": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "username": {
                                "type": "string"
                            },
                            "first_name": {
                                "type": "string"
                            },
                            "last_name": {
                                "type": "string"
                            }
                        }
                    },
                    "modified_by": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "username": {
                                "type": "string"
                            },
                            "first_name": {
                                "type": "string"
                            },
                            "last_name": {
                                "type": "string"
                            }
                        }
                    },
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "owner": {
                        "type": "string",
                        "readOnly": true
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "test_content_type": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The content type of test data, when in test mode"
                    },
                    "test_content": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The content recieved, when in test mode, stored as a yaml string"
                    },
                    "test_error_message": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The error message,  when in test mode"
                    },
                    "test_headers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The headers recieved, when in test mode, stored as a yaml string"
                    },
                    "events_received": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "The total number of events received by event stream"
                    },
                    "last_event_received_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true,
                        "description": "The date/time when the last event was received"
                    }
                },
                "required": [
                    "created_at",
                    "created_by",
                    "eda_credential",
                    "events_received",
                    "id",
                    "last_event_received_at",
                    "modified_at",
                    "modified_by",
                    "name",
                    "organization",
                    "owner",
                    "test_content",
                    "test_content_type",
                    "test_error_message",
                    "test_headers",
                    "url"
                ]
            },
            "ImportStateEnum": {
                "enum": [
                    "pending",
                    "running",
                    "failed",
                    "completed"
                ],
                "type": "string",
                "description": "* `pending` - Pending\n* `running` - Running\n* `failed` - Failed\n* `completed` - Completed"
            },
            "JWTToken": {
                "type": "object",
                "properties": {
                    "access": {
                        "type": "string"
                    }
                },
                "required": [
                    "access"
                ]
            },
            "LogLevelEnum": {
                "enum": [
                    "debug",
                    "info",
                    "error"
                ],
                "type": "string",
                "description": "* `debug` - debug\n* `info` - info\n* `error` - error"
            },
            "Login": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    }
                },
                "required": [
                    "password",
                    "username"
                ]
            },
            "Organization": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this resource.",
                        "maxLength": 512
                    },
                    "description": {
                        "type": "string",
                        "description": "The organization description."
                    },
                    "resource": {
                        "type": "object",
                        "additionalProperties": true,
                        "readOnly": true
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date/time this resource was created."
                    },
                    "created_by": {
                        "type": "integer",
                        "readOnly": true,
                        "nullable": true,
                        "description": "The user who created this resource."
                    },
                    "modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date/time this resource was created."
                    },
                    "modified_by": {
                        "type": "integer",
                        "readOnly": true,
                        "nullable": true,
                        "description": "The user who last modified this resource."
                    }
                },
                "required": [
                    "created",
                    "created_by",
                    "id",
                    "modified",
                    "modified_by",
                    "name",
                    "resource"
                ]
            },
            "OrganizationRef": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this resource.",
                        "maxLength": 512
                    },
                    "description": {
                        "type": "string",
                        "description": "The organization description."
                    }
                },
                "required": [
                    "id",
                    "name"
                ]
            },
            "PaginatedActivationInstanceList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ActivationInstance"
                        }
                    }
                }
            },
            "PaginatedActivationInstanceLogList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ActivationInstanceLog"
                        }
                    }
                }
            },
            "PaginatedActivationListList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ActivationList"
                        }
                    }
                }
            },
            "PaginatedAuditActionList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuditAction"
                        }
                    }
                }
            },
            "PaginatedAuditEventList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuditEvent"
                        }
                    }
                }
            },
            "PaginatedAuditRuleListList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuditRuleList"
                        }
                    }
                }
            },
            "PaginatedAwxTokenList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AwxToken"
                        }
                    }
                }
            },
            "PaginatedCredentialInputSourceList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CredentialInputSource"
                        }
                    }
                }
            },
            "PaginatedCredentialTypeList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CredentialType"
                        }
                    }
                }
            },
            "PaginatedDABContentTypeList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DABContentType"
                        }
                    }
                }
            },
            "PaginatedDABPermissionList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DABPermission"
                        }
                    }
                }
            },
            "PaginatedDecisionEnvironmentList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DecisionEnvironment"
                        }
                    }
                }
            },
            "PaginatedEdaCredentialList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EdaCredential"
                        }
                    }
                }
            },
            "PaginatedEventStreamOutList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EventStreamOut"
                        }
                    }
                }
            },
            "PaginatedOrganizationList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Organization"
                        }
                    }
                }
            },
            "PaginatedProjectList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Project"
                        }
                    }
                }
            },
            "PaginatedResourceListList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ResourceList"
                        }
                    }
                }
            },
            "PaginatedResourceTypeList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ResourceType"
                        }
                    }
                }
            },
            "PaginatedRoleDefinitionList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RoleDefinition"
                        }
                    }
                }
            },
            "PaginatedRoleTeamAssignmentList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RoleTeamAssignment"
                        }
                    }
                }
            },
            "PaginatedRoleUserAssignmentList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RoleUserAssignment"
                        }
                    }
                }
            },
            "PaginatedRulebookList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Rulebook"
                        }
                    }
                }
            },
            "PaginatedServiceRoleTeamAssignmentList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceRoleTeamAssignment"
                        }
                    }
                }
            },
            "PaginatedServiceRoleUserAssignmentList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceRoleUserAssignment"
                        }
                    }
                }
            },
            "PaginatedSourceList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Source"
                        }
                    }
                }
            },
            "PaginatedTeamAccessAssignmentList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TeamAccessAssignment"
                        }
                    }
                }
            },
            "PaginatedTeamAccessViewSet_Team_List": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TeamAccessViewSet_Team_"
                        }
                    }
                }
            },
            "PaginatedTeamList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Team"
                        }
                    }
                }
            },
            "PaginatedUserAccessAssignmentList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserAccessAssignment"
                        }
                    }
                }
            },
            "PaginatedUserAccessViewSet_User_List": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserAccessViewSet_User_"
                        }
                    }
                }
            },
            "PaginatedUserListList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=51&page_size=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "/eda/api/v1/example/?page=49&page_size=100"
                    },
                    "page_size": {
                        "type": "integer",
                        "nullable": true,
                        "example": 100
                    },
                    "page": {
                        "type": "integer",
                        "nullable": true,
                        "example": 50
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserList"
                        }
                    }
                }
            },
            "PatchedActivationUpdate": {
                "type": "object",
                "description": "Serializer for updating the Activation.",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "is_enabled": {
                        "type": "boolean"
                    },
                    "decision_environment_id": {
                        "type": "integer"
                    },
                    "rulebook_id": {
                        "type": "integer"
                    },
                    "extra_var": {
                        "type": "string",
                        "nullable": true
                    },
                    "organization_id": {
                        "type": "integer"
                    },
                    "user": {
                        "type": "integer",
                        "nullable": true
                    },
                    "restart_policy": {
                        "$ref": "#/components/schemas/RestartPolicyEnum"
                    },
                    "awx_token_id": {
                        "type": "integer",
                        "nullable": true
                    },
                    "log_level": {
                        "$ref": "#/components/schemas/LogLevelEnum"
                    },
                    "eda_credentials": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "k8s_service_name": {
                        "type": "string",
                        "nullable": true
                    },
                    "source_mappings": {
                        "type": "string",
                        "description": "Mapping between sources and event streams"
                    },
                    "skip_audit_events": {
                        "type": "boolean",
                        "description": "Skip audit events for activation"
                    }
                }
            },
            "PatchedCredentialInputSourceUpdate": {
                "type": "object",
                "description": "Serializer used during update of the instance.",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": true
                    },
                    "organization_id": {
                        "type": "integer"
                    },
                    "source_credential": {
                        "type": "integer",
                        "nullable": true,
                        "description": "External credential"
                    },
                    "target_credential": {
                        "type": "integer",
                        "nullable": true,
                        "description": "Non external credential"
                    },
                    "input_field_name": {
                        "type": "string",
                        "maxLength": 1024
                    }
                }
            },
            "PatchedCredentialTypeCreate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "inputs": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Inputs of the credential type"
                    },
                    "injectors": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Injectors of the credential type"
                    }
                }
            },
            "PatchedDecisionEnvironmentCreate": {
                "type": "object",
                "description": "Serializer for creating the DecisionEnvironment.",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "image_url": {
                        "type": "string"
                    },
                    "organization_id": {
                        "type": "integer"
                    },
                    "eda_credential_id": {
                        "type": "integer",
                        "nullable": true
                    },
                    "pull_policy": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/PullPolicyEnum"
                            }
                        ],
                        "description": "Pull policy for the image before running\n\n* `always` - Always pull container before running.\n* `missing` - Only pull the image if not present before running.\n* `never` - Never pull container before running."
                    }
                }
            },
            "PatchedEdaCredentialUpdate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "inputs": {
                        "type": "object",
                        "additionalProperties": true
                    },
                    "organization_id": {
                        "type": "integer"
                    }
                }
            },
            "PatchedEventStreamIn": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "test_mode": {
                        "type": "boolean",
                        "description": "Enable test mode"
                    },
                    "additional_data_headers": {
                        "type": "string",
                        "description": "The additional http headers which will be added to the event data. The headers are comma delimited"
                    },
                    "eda_credential_id": {
                        "type": "integer"
                    },
                    "organization_id": {
                        "type": "integer"
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    }
                }
            },
            "PatchedProjectUpdateRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the project"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "Description of the project"
                    },
                    "organization_id": {
                        "type": "integer"
                    },
                    "eda_credential_id": {
                        "type": "integer",
                        "nullable": true,
                        "description": "EdaCredential id of the project"
                    },
                    "signature_validation_credential_id": {
                        "type": "integer",
                        "nullable": true,
                        "description": "ID of an optional credential used for validating files in the project against unexpected changes"
                    },
                    "scm_branch": {
                        "type": "string",
                        "nullable": true,
                        "description": "Specific branch, tag or commit to checkout."
                    },
                    "scm_refspec": {
                        "type": "string",
                        "nullable": true,
                        "description": "For git projects, an additional refspec to fetch."
                    },
                    "verify_ssl": {
                        "type": "boolean",
                        "description": "Indicates if SSL verification is enabled"
                    },
                    "proxy": {
                        "type": "string",
                        "nullable": true,
                        "description": "Proxy server for http or https connection"
                    },
                    "url": {
                        "type": "string",
                        "nullable": true,
                        "description": "Source control repository URL."
                    }
                }
            },
            "PatchedResource": {
                "type": "object",
                "properties": {
                    "object_id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The object id for this resource."
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true,
                        "nullable": true,
                        "description": "The name of this resource."
                    },
                    "ansible_id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "A unique ID identifying this resource by the resource server."
                    },
                    "service_id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the service responsible for managing this resource."
                    },
                    "is_partially_migrated": {
                        "type": "boolean",
                        "description": "A flag indicating that the resource has been copied into the resource server, but the service_id hasn't been updated yet."
                    },
                    "resource_type": {
                        "type": "string"
                    },
                    "has_serializer": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "resource_data": {
                        "type": "object",
                        "additionalProperties": true
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "additional_data": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "PatchedRoleDefinition": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "related": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "readOnly": true
                    },
                    "summary_fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "readOnly": true
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "String to use for references to this type from other models in the API."
                        }
                    },
                    "content_type": {
                        "type": "string",
                        "description": "String to use for references to this type from other models in the API.",
                        "nullable": true
                    },
                    "modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date/time this resource was created."
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date/time this resource was created."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this role."
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of this role."
                    },
                    "managed": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Is this role managed by the system (not changeable by the users)."
                    },
                    "modified_by": {
                        "type": "integer",
                        "readOnly": true,
                        "nullable": true,
                        "description": "The user who last modified this resource."
                    },
                    "created_by": {
                        "type": "integer",
                        "readOnly": true,
                        "nullable": true,
                        "description": "The user who created this resource."
                    }
                }
            },
            "PatchedUserUpdateIsSuperuser": {
                "type": "object",
                "properties": {
                    "is_superuser": {
                        "type": "boolean",
                        "title": "Superuser status",
                        "description": "Designates that this user has all permissions without explicitly assigning them."
                    }
                }
            },
            "Project": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "organization_id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "eda_credential_id": {
                        "type": "integer",
                        "nullable": true
                    },
                    "signature_validation_credential_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true
                    },
                    "scm_branch": {
                        "type": "string"
                    },
                    "scm_refspec": {
                        "type": "string"
                    },
                    "verify_ssl": {
                        "type": "boolean"
                    },
                    "proxy": {
                        "type": "string",
                        "readOnly": true
                    },
                    "created_by": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "username": {
                                "type": "string"
                            },
                            "first_name": {
                                "type": "string"
                            },
                            "last_name": {
                                "type": "string"
                            }
                        }
                    },
                    "modified_by": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "username": {
                                "type": "string"
                            },
                            "first_name": {
                                "type": "string"
                            },
                            "last_name": {
                                "type": "string"
                            }
                        }
                    },
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "scm_type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ScmTypeEnum"
                            }
                        ],
                        "readOnly": true
                    },
                    "git_hash": {
                        "type": "string",
                        "readOnly": true
                    },
                    "import_state": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ImportStateEnum"
                            }
                        ],
                        "readOnly": true
                    },
                    "import_error": {
                        "type": "string",
                        "readOnly": true,
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "created_at",
                    "created_by",
                    "git_hash",
                    "id",
                    "import_error",
                    "import_state",
                    "modified_at",
                    "modified_by",
                    "name",
                    "organization_id",
                    "proxy",
                    "scm_type",
                    "signature_validation_credential_id",
                    "url"
                ]
            },
            "ProjectCreateRequest": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "description": "Source control repository URL."
                    },
                    "proxy": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "organization_id": {
                        "type": "integer"
                    },
                    "eda_credential_id": {
                        "type": "integer",
                        "nullable": true
                    },
                    "signature_validation_credential_id": {
                        "type": "integer",
                        "nullable": true
                    },
                    "verify_ssl": {
                        "type": "boolean"
                    },
                    "scm_type": {
                        "$ref": "#/components/schemas/ScmTypeEnum"
                    },
                    "scm_branch": {
                        "type": "string",
                        "nullable": true,
                        "description": "Specific branch, tag or commit to checkout."
                    },
                    "scm_refspec": {
                        "type": "string",
                        "nullable": true,
                        "description": "For git projects, an additional refspec to fetch."
                    }
                },
                "required": [
                    "name",
                    "organization_id",
                    "url"
                ]
            },
            "ProjectRead": {
                "type": "object",
                "description": "Serializer for reading the Project with embedded objects.",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "organization": {
                        "$ref": "#/components/schemas/OrganizationRef"
                    },
                    "eda_credential": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/EdaCredentialRef"
                            }
                        ],
                        "nullable": true
                    },
                    "signature_validation_credential": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/EdaCredentialRef"
                            }
                        ],
                        "nullable": true
                    },
                    "verify_ssl": {
                        "type": "boolean"
                    },
                    "scm_branch": {
                        "type": "string"
                    },
                    "scm_refspec": {
                        "type": "string"
                    },
                    "proxy": {
                        "type": "string",
                        "readOnly": true
                    },
                    "created_by": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "username": {
                                "type": "string"
                            },
                            "first_name": {
                                "type": "string"
                            },
                            "last_name": {
                                "type": "string"
                            }
                        }
                    },
                    "modified_by": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "username": {
                                "type": "string"
                            },
                            "first_name": {
                                "type": "string"
                            },
                            "last_name": {
                                "type": "string"
                            }
                        }
                    },
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "scm_type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ScmTypeEnum"
                            }
                        ],
                        "readOnly": true
                    },
                    "git_hash": {
                        "type": "string",
                        "readOnly": true
                    },
                    "import_state": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ImportStateEnum"
                            }
                        ],
                        "readOnly": true
                    },
                    "import_error": {
                        "type": "string",
                        "readOnly": true,
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "created_at",
                    "created_by",
                    "git_hash",
                    "id",
                    "import_error",
                    "import_state",
                    "modified_at",
                    "modified_by",
                    "name",
                    "organization",
                    "proxy",
                    "scm_type",
                    "url"
                ]
            },
            "ProjectRef": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "git_hash": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "scm_type": {
                        "$ref": "#/components/schemas/ScmTypeEnum"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "organization_id": {
                        "type": "integer",
                        "readOnly": true
                    }
                },
                "required": [
                    "git_hash",
                    "id",
                    "name",
                    "organization_id",
                    "url"
                ]
            },
            "PullPolicyEnum": {
                "enum": [
                    "always",
                    "missing",
                    "never"
                ],
                "type": "string",
                "description": "* `always` - Always pull container before running.\n* `missing` - Only pull the image if not present before running.\n* `never` - Never pull container before running."
            },
            "RefreshToken": {
                "type": "object",
                "properties": {
                    "refresh": {
                        "type": "string"
                    }
                },
                "required": [
                    "refresh"
                ]
            },
            "Resource": {
                "type": "object",
                "properties": {
                    "object_id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The object id for this resource."
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true,
                        "nullable": true,
                        "description": "The name of this resource."
                    },
                    "ansible_id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "A unique ID identifying this resource by the resource server."
                    },
                    "service_id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the service responsible for managing this resource."
                    },
                    "is_partially_migrated": {
                        "type": "boolean",
                        "description": "A flag indicating that the resource has been copied into the resource server, but the service_id hasn't been updated yet."
                    },
                    "resource_type": {
                        "type": "string"
                    },
                    "has_serializer": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "resource_data": {
                        "type": "object",
                        "additionalProperties": true
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "additional_data": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "required": [
                    "additional_data",
                    "has_serializer",
                    "name",
                    "object_id",
                    "resource_data",
                    "url"
                ]
            },
            "ResourceList": {
                "type": "object",
                "properties": {
                    "object_id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The object id for this resource."
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true,
                        "nullable": true,
                        "description": "The name of this resource."
                    },
                    "ansible_id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "A unique ID identifying this resource by the resource server."
                    },
                    "service_id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the service responsible for managing this resource."
                    },
                    "is_partially_migrated": {
                        "type": "boolean",
                        "description": "A flag indicating that the resource has been copied into the resource server, but the service_id hasn't been updated yet."
                    },
                    "resource_type": {
                        "type": "string"
                    },
                    "has_serializer": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "resource_data": {
                        "type": "object",
                        "additionalProperties": true,
                        "writeOnly": true
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "required": [
                    "has_serializer",
                    "name",
                    "object_id",
                    "resource_data",
                    "url"
                ]
            },
            "ResourceType": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The name of this resource type."
                    },
                    "externally_managed": {
                        "type": "boolean",
                        "description": "Is this resource type managed externally from this service."
                    },
                    "shared_resource_type": {
                        "type": "string",
                        "nullable": true,
                        "readOnly": true
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "required": [
                    "externally_managed",
                    "id",
                    "name",
                    "shared_resource_type",
                    "url"
                ]
            },
            "RestartPolicyEnum": {
                "enum": [
                    "always",
                    "on-failure",
                    "never"
                ],
                "type": "string",
                "description": "* `always` - always\n* `on-failure` - on-failure\n* `never` - never"
            },
            "RoleDefinition": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "related": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "readOnly": true
                    },
                    "summary_fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "readOnly": true
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "String to use for references to this type from other models in the API."
                        }
                    },
                    "content_type": {
                        "type": "string",
                        "description": "String to use for references to this type from other models in the API.",
                        "nullable": true
                    },
                    "modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date/time this resource was created."
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date/time this resource was created."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this role."
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of this role."
                    },
                    "managed": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Is this role managed by the system (not changeable by the users)."
                    },
                    "modified_by": {
                        "type": "integer",
                        "readOnly": true,
                        "nullable": true,
                        "description": "The user who last modified this resource."
                    },
                    "created_by": {
                        "type": "integer",
                        "readOnly": true,
                        "nullable": true,
                        "description": "The user who created this resource."
                    }
                },
                "required": [
                    "created",
                    "created_by",
                    "id",
                    "managed",
                    "modified",
                    "modified_by",
                    "name",
                    "permissions",
                    "related",
                    "summary_fields",
                    "url"
                ]
            },
            "RoleDefinitionCreate": {
                "type": "object",
                "properties": {
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "String to use for references to this type from other models in the API."
                        }
                    },
                    "content_type": {
                        "type": "string",
                        "description": "String to use for references to this type from other models in the API.",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this role."
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of this role."
                    }
                },
                "required": [
                    "name",
                    "permissions"
                ]
            },
            "RoleTeamAssignment": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "related": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "readOnly": true
                    },
                    "summary_fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "readOnly": true
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date/time this resource was created."
                    },
                    "created_by": {
                        "type": "integer",
                        "readOnly": true,
                        "nullable": true,
                        "description": "The user who created this resource."
                    },
                    "content_type": {
                        "type": "string",
                        "description": "String to use for references to this type from other models in the API.",
                        "readOnly": true
                    },
                    "object_id": {
                        "type": "string",
                        "nullable": true,
                        "description": "The primary key of the object this assignment applies to; null value indicates system-wide assignment."
                    },
                    "object_ansible_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "The resource id of the object this role applies to. An alternative to the object_id field."
                    },
                    "role_definition": {
                        "type": "integer",
                        "description": "The role definition which defines permissions conveyed by this assignment."
                    },
                    "team": {
                        "type": "integer"
                    },
                    "team_ansible_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "The resource ID of the team who will receive permissions from this assignment. An alternative to team field."
                    }
                },
                "required": [
                    "content_type",
                    "created",
                    "created_by",
                    "id",
                    "related",
                    "role_definition",
                    "summary_fields",
                    "url"
                ]
            },
            "RoleTeamAssignmentCreate": {
                "type": "object",
                "properties": {
                    "object_id": {
                        "type": "string",
                        "nullable": true,
                        "description": "The primary key of the object this assignment applies to; null value indicates system-wide assignment."
                    },
                    "object_ansible_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "The resource id of the object this role applies to. An alternative to the object_id field."
                    },
                    "role_definition": {
                        "type": "integer",
                        "description": "The role definition which defines permissions conveyed by this assignment."
                    },
                    "team": {
                        "type": "integer"
                    },
                    "team_ansible_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "The resource ID of the team who will receive permissions from this assignment. An alternative to team field."
                    }
                },
                "required": [
                    "role_definition"
                ]
            },
            "RoleUserAssignment": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "related": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "readOnly": true
                    },
                    "summary_fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "readOnly": true
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date/time this resource was created."
                    },
                    "created_by": {
                        "type": "integer",
                        "readOnly": true,
                        "nullable": true,
                        "description": "The user who created this resource."
                    },
                    "content_type": {
                        "type": "string",
                        "description": "String to use for references to this type from other models in the API.",
                        "readOnly": true
                    },
                    "object_id": {
                        "type": "string",
                        "nullable": true,
                        "description": "The primary key of the object this assignment applies to; null value indicates system-wide assignment."
                    },
                    "object_ansible_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "The resource id of the object this role applies to. An alternative to the object_id field."
                    },
                    "role_definition": {
                        "type": "integer",
                        "description": "The role definition which defines permissions conveyed by this assignment."
                    },
                    "user": {
                        "type": "integer"
                    },
                    "user_ansible_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "The resource ID of the user who will receive permissions from this assignment. An alternative to user field."
                    }
                },
                "required": [
                    "content_type",
                    "created",
                    "created_by",
                    "id",
                    "related",
                    "role_definition",
                    "summary_fields",
                    "url"
                ]
            },
            "RoleUserAssignmentCreate": {
                "type": "object",
                "properties": {
                    "object_id": {
                        "type": "string",
                        "nullable": true,
                        "description": "The primary key of the object this assignment applies to; null value indicates system-wide assignment."
                    },
                    "object_ansible_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "The resource id of the object this role applies to. An alternative to the object_id field."
                    },
                    "role_definition": {
                        "type": "integer",
                        "description": "The role definition which defines permissions conveyed by this assignment."
                    },
                    "user": {
                        "type": "integer"
                    },
                    "user_ansible_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "The resource ID of the user who will receive permissions from this assignment. An alternative to user field."
                    }
                },
                "required": [
                    "role_definition"
                ]
            },
            "Rulebook": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "rulesets": {
                        "type": "string"
                    },
                    "project_id": {
                        "type": "integer",
                        "nullable": true,
                        "description": "ID of the project"
                    },
                    "organization_id": {
                        "type": "integer",
                        "description": "ID of the organization"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "created_at",
                    "id",
                    "modified_at",
                    "name",
                    "organization_id"
                ]
            },
            "RulebookRef": {
                "type": "object",
                "description": "Serializer for Rulebook reference.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "organization_id": {
                        "type": "integer",
                        "readOnly": true
                    }
                },
                "required": [
                    "id",
                    "name",
                    "organization_id"
                ]
            },
            "ScmTypeEnum": {
                "enum": [
                    "git"
                ],
                "type": "string",
                "description": "* `git` - Git"
            },
            "ServiceRoleTeamAssignment": {
                "type": "object",
                "properties": {
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date/time this resource was created."
                    },
                    "created_by_ansible_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "object_id": {
                        "type": "string",
                        "nullable": true
                    },
                    "object_ansible_id": {
                        "type": "string",
                        "nullable": true
                    },
                    "content_type": {
                        "type": "string",
                        "description": "String to use for references to this type from other models in the API.",
                        "readOnly": true
                    },
                    "role_definition": {
                        "type": "string",
                        "description": "The name of this role."
                    },
                    "team_ansible_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "required": [
                    "content_type",
                    "created",
                    "role_definition",
                    "team_ansible_id"
                ]
            },
            "ServiceRoleUserAssignment": {
                "type": "object",
                "properties": {
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date/time this resource was created."
                    },
                    "created_by_ansible_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "object_id": {
                        "type": "string",
                        "nullable": true
                    },
                    "object_ansible_id": {
                        "type": "string",
                        "nullable": true
                    },
                    "content_type": {
                        "type": "string",
                        "description": "String to use for references to this type from other models in the API.",
                        "readOnly": true
                    },
                    "role_definition": {
                        "type": "string",
                        "description": "The name of this role."
                    },
                    "user_ansible_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "required": [
                    "content_type",
                    "created",
                    "role_definition",
                    "user_ansible_id"
                ]
            },
            "Source": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the source"
                    },
                    "source_info": {
                        "type": "string",
                        "description": "The information about the source"
                    },
                    "rulebook_hash": {
                        "type": "string",
                        "description": "Hash of the rulebook"
                    }
                },
                "required": [
                    "name",
                    "rulebook_hash",
                    "source_info"
                ]
            },
            "StatusEnum": {
                "enum": [
                    "starting",
                    "running",
                    "pending",
                    "failed",
                    "stopping",
                    "stopped",
                    "deleting",
                    "completed",
                    "unresponsive",
                    "error",
                    "workers offline"
                ],
                "type": "string",
                "description": "* `starting` - starting\n* `running` - running\n* `pending` - pending\n* `failed` - failed\n* `stopping` - stopping\n* `stopped` - stopped\n* `deleting` - deleting\n* `completed` - completed\n* `unresponsive` - unresponsive\n* `error` - error\n* `workers offline` - workers offline"
            },
            "StatusResponse": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "required": [
                    "status"
                ]
            },
            "Team": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this resource.",
                        "maxLength": 512
                    },
                    "description": {
                        "type": "string",
                        "description": "The team description."
                    },
                    "organization_id": {
                        "type": "integer",
                        "description": "The organization of this team.",
                        "readOnly": true
                    },
                    "resource": {
                        "type": "object",
                        "additionalProperties": true,
                        "readOnly": true
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date/time this resource was created."
                    },
                    "created_by": {
                        "type": "integer",
                        "readOnly": true,
                        "nullable": true,
                        "description": "The user who created this resource."
                    },
                    "modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date/time this resource was created."
                    },
                    "modified_by": {
                        "type": "integer",
                        "readOnly": true,
                        "nullable": true,
                        "description": "The user who last modified this resource."
                    }
                },
                "required": [
                    "created",
                    "created_by",
                    "id",
                    "modified",
                    "modified_by",
                    "name",
                    "organization_id",
                    "resource"
                ]
            },
            "TeamAccessAssignment": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "related": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "readOnly": true
                    },
                    "summary_fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "readOnly": true
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date/time this resource was created."
                    },
                    "created_by": {
                        "type": "integer",
                        "readOnly": true,
                        "nullable": true,
                        "description": "The user who created this resource."
                    },
                    "content_type": {
                        "type": "string",
                        "description": "String to use for references to this type from other models in the API.",
                        "readOnly": true
                    },
                    "object_id": {
                        "type": "string",
                        "nullable": true,
                        "description": "The primary key of the object this assignment applies to; null value indicates system-wide assignment."
                    },
                    "object_ansible_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "The resource id of the object this role applies to. An alternative to the object_id field."
                    },
                    "role_definition": {
                        "type": "integer",
                        "description": "The role definition which defines permissions conveyed by this assignment."
                    },
                    "team": {
                        "type": "integer"
                    },
                    "team_ansible_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "The resource ID of the team who will receive permissions from this assignment. An alternative to team field."
                    }
                },
                "required": [
                    "content_type",
                    "created",
                    "created_by",
                    "id",
                    "related",
                    "role_definition",
                    "summary_fields",
                    "url"
                ]
            },
            "TeamAccessViewSet_Team_": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "related": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this resource.",
                        "maxLength": 512
                    },
                    "organization": {
                        "type": "integer",
                        "description": "The organization of this team."
                    },
                    "object_role_assignments": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "required": [
                    "id",
                    "name",
                    "object_role_assignments",
                    "organization",
                    "related",
                    "url"
                ]
            },
            "TeamDetail": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this resource.",
                        "maxLength": 512
                    },
                    "description": {
                        "type": "string",
                        "description": "The team description."
                    },
                    "organization": {
                        "$ref": "#/components/schemas/OrganizationRef"
                    },
                    "resource": {
                        "type": "object",
                        "additionalProperties": true,
                        "readOnly": true
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date/time this resource was created."
                    },
                    "created_by": {
                        "type": "integer",
                        "readOnly": true,
                        "nullable": true,
                        "description": "The user who created this resource."
                    },
                    "modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date/time this resource was created."
                    },
                    "modified_by": {
                        "type": "integer",
                        "readOnly": true,
                        "nullable": true,
                        "description": "The user who last modified this resource."
                    }
                },
                "required": [
                    "created",
                    "created_by",
                    "id",
                    "modified",
                    "modified_by",
                    "name",
                    "organization",
                    "resource"
                ]
            },
            "UserAccessAssignment": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "related": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "readOnly": true
                    },
                    "summary_fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "readOnly": true
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date/time this resource was created."
                    },
                    "created_by": {
                        "type": "integer",
                        "readOnly": true,
                        "nullable": true,
                        "description": "The user who created this resource."
                    },
                    "content_type": {
                        "type": "string",
                        "description": "String to use for references to this type from other models in the API.",
                        "readOnly": true
                    },
                    "object_id": {
                        "type": "string",
                        "nullable": true,
                        "description": "The primary key of the object this assignment applies to; null value indicates system-wide assignment."
                    },
                    "object_ansible_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "The resource id of the object this role applies to. An alternative to the object_id field."
                    },
                    "role_definition": {
                        "type": "integer",
                        "description": "The role definition which defines permissions conveyed by this assignment."
                    },
                    "user": {
                        "type": "integer"
                    },
                    "user_ansible_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "The resource ID of the user who will receive permissions from this assignment. An alternative to user field."
                    },
                    "intermediary_roles": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "required": [
                    "content_type",
                    "created",
                    "created_by",
                    "id",
                    "intermediary_roles",
                    "related",
                    "role_definition",
                    "summary_fields",
                    "url"
                ]
            },
            "UserAccessViewSet_User_": {
                "type": "object",
                "description": "controller uses auth.User model so this needs to be as compatible as possible, thus ModelSerializer",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "related": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "readOnly": true
                    },
                    "username": {
                        "type": "string",
                        "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        "pattern": "^[\\w.@+-]+$",
                        "maxLength": 150
                    },
                    "is_superuser": {
                        "type": "boolean",
                        "title": "Superuser status",
                        "description": "Designates that this user has all permissions without explicitly assigning them."
                    },
                    "first_name": {
                        "type": "string",
                        "maxLength": 150
                    },
                    "last_name": {
                        "type": "string",
                        "maxLength": 150
                    },
                    "object_role_assignments": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "required": [
                    "id",
                    "object_role_assignments",
                    "related",
                    "url",
                    "username"
                ]
            },
            "UserDetail": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "username": {
                        "type": "string",
                        "description": "The user's log in name."
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "title": "Email address",
                        "maxLength": 254
                    },
                    "first_name": {
                        "type": "string",
                        "maxLength": 150
                    },
                    "last_name": {
                        "type": "string",
                        "maxLength": 150
                    },
                    "is_superuser": {
                        "type": "boolean",
                        "title": "Superuser status",
                        "description": "Designates that this user has all permissions without explicitly assigning them."
                    },
                    "resource": {
                        "type": "object",
                        "additionalProperties": true,
                        "readOnly": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "created_at",
                    "id",
                    "modified_at",
                    "resource",
                    "username"
                ]
            },
            "UserList": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The ID of the user"
                    },
                    "username": {
                        "type": "string",
                        "description": "The user's log in name."
                    },
                    "first_name": {
                        "type": "string",
                        "description": "The user's first name."
                    },
                    "last_name": {
                        "type": "string",
                        "description": "The user's last name."
                    },
                    "is_superuser": {
                        "type": "boolean",
                        "description": "The user is a superuser."
                    },
                    "resource": {
                        "type": "object",
                        "additionalProperties": true,
                        "readOnly": true
                    }
                },
                "required": [
                    "first_name",
                    "id",
                    "is_superuser",
                    "last_name",
                    "resource",
                    "username"
                ]
            }
        },
        "securitySchemes": {
            "EDAJWTAuthentication": {
                "type": "apiKey",
                "name": "X-DAB-JW-TOKEN",
                "in": "header"
            },
            "basicAuth": {
                "type": "http",
                "scheme": "basic"
            },
            "cookieAuth": {
                "type": "apiKey",
                "in": "cookie",
                "name": "sessionid"
            }
        }
    },
    "servers": [
        {
            "url": "/api/eda/v1"
        }
    ]
}